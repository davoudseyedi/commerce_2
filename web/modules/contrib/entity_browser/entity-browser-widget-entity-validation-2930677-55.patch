diff --git a/config/schema/entity_browser.schema.yml b/config/schema/entity_browser.schema.yml
index 84ff907..0d15603 100644
--- a/config/schema/entity_browser.schema.yml
+++ b/config/schema/entity_browser.schema.yml
@@ -101,6 +101,27 @@ entity_browser.browser.widget.upload:
       type: string
       label: 'Allowed file extensions'
 
+entity_browser.browser.widget.media_image_upload:
+  type: mapping
+  label: 'Upload widget configuration'
+  mapping:
+    submit_text:
+      type: label
+      label: 'Submit button text'
+    upload_location:
+      type: string
+      label: 'Upload location'
+    # Leaving as a string for backwards compatibility.
+    multiple:
+      type: string
+      label: 'Allow multiple uploads'
+    extensions:
+      type: string
+      label: 'Allowed file extensions'
+    media_type:
+      type: string
+      label: 'Media type'
+
 entity_browser.browser.widget.view:
   type: mapping
   label: 'View widget configuration'
diff --git a/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php b/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
index af08d77..ab4726a 100644
--- a/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
+++ b/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
@@ -83,6 +83,25 @@ class EntityForm extends WidgetBase {
     );
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetEntityTypeId() {
+    return $this->configuration['entity_type'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetBundles() {
+
+    if (!empty($this->configuration['bundle'])) {
+      return [$this->configuration['bundle']];
+    }
+
+    return [];
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -102,6 +121,19 @@ class EntityForm extends WidgetBase {
     if (empty($this->configuration['entity_type']) || empty($this->configuration['bundle'])  || empty($this->configuration['form_mode'])) {
       return ['#markup' => $this->t('The settings for this widget (Entity type, Bundle or Form mode) are not configured correctly.')];
     }
+    elseif (!empty($form_state->getStorage()['entity_browser']['widget_context'])) {
+      $widget_context = $form_state->getStorage()['entity_browser']['widget_context'];
+      if (!empty($widget_context['target_entity_type']) && $widget_context['target_entity_type'] != $this->configuration['entity_type']) {
+        return [
+          '#markup' => $this->getWrongEntityMessage($widget_context),
+        ];
+      }
+      elseif (!empty($widget_context['target_bundles']) && !in_array($this->configuration['bundle'], $widget_context['target_bundles'])) {
+        return [
+          '#markup' => $this->getWrongBundleMessage($widget_context),
+        ];
+      }
+    }
 
     $form = parent::getForm($original_form, $form_state, $additional_widget_parameters);
 
diff --git a/src/Plugin/EntityBrowser/Widget/MediaImageUpload.php b/src/Plugin/EntityBrowser/Widget/MediaImageUpload.php
index 5baf1c8..4d9b72b 100644
--- a/src/Plugin/EntityBrowser/Widget/MediaImageUpload.php
+++ b/src/Plugin/EntityBrowser/Widget/MediaImageUpload.php
@@ -19,6 +19,13 @@ use Drupal\media\MediaInterface;
  */
 class MediaImageUpload extends FileUpload {
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetEntityTypeId() {
+    return 'media';
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -33,8 +40,18 @@ class MediaImageUpload extends FileUpload {
    * {@inheritdoc}
    */
   public function getForm(array &$original_form, FormStateInterface $form_state, array $aditional_widget_parameters) {
+
+    if (!empty($form_state->getStorage()['entity_browser']['widget_context'])) {
+      $widget_context = $form_state->getStorage()['entity_browser']['widget_context'];
+      if (!empty($widget_context['target_entity_type']) && $widget_context['target_entity_type'] != 'media') {
+        return [
+          '#markup' => $this->getWrongEntityMessage($widget_context),
+        ];
+      }
+    }
+
     /** @var \Drupal\media\MediaTypeInterface $media_type */
-    if (!$this->configuration['media_type'] || !($media_type = $this->entityTypeManager->getStorage('media_type')->load($this->configuration['media_type']))) {
+    elseif (!$this->configuration['media_type'] || !($media_type = $this->entityTypeManager->getStorage('media_type')->load($this->configuration['media_type']))) {
       return ['#markup' => $this->t('The media type is not configured correctly.')];
     }
 
diff --git a/src/Plugin/EntityBrowser/Widget/Upload.php b/src/Plugin/EntityBrowser/Widget/Upload.php
index a0b7edf..f4cc2c0 100644
--- a/src/Plugin/EntityBrowser/Widget/Upload.php
+++ b/src/Plugin/EntityBrowser/Widget/Upload.php
@@ -81,6 +81,13 @@ class Upload extends WidgetBase {
     );
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetEntityTypeId() {
+    return 'file';
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -97,6 +104,16 @@ class Upload extends WidgetBase {
    * {@inheritdoc}
    */
   public function getForm(array &$original_form, FormStateInterface $form_state, array $additional_widget_parameters) {
+
+    if (!empty($form_state->getStorage()['entity_browser']['widget_context'])) {
+      $widget_context = $form_state->getStorage()['entity_browser']['widget_context'];
+      if (!empty($widget_context['target_entity_type']) && $widget_context['target_entity_type'] != 'file') {
+        return [
+          '#markup' => $this->getWrongEntityMessage($widget_context),
+        ];
+      }
+    }
+
     $form = parent::getForm($original_form, $form_state, $additional_widget_parameters);
     $field_cardinality = $form_state->get(['entity_browser', 'validators', 'cardinality', 'cardinality']);
     $upload_validators = $form_state->has(['entity_browser', 'widget_context', 'upload_validators']) ? $form_state->get(['entity_browser', 'widget_context', 'upload_validators']) : [];
diff --git a/src/Plugin/EntityBrowser/Widget/View.php b/src/Plugin/EntityBrowser/Widget/View.php
index 981d290..850d8ce 100644
--- a/src/Plugin/EntityBrowser/Widget/View.php
+++ b/src/Plugin/EntityBrowser/Widget/View.php
@@ -89,16 +89,49 @@ class View extends WidgetBase implements ContainerFactoryPluginInterface {
    * {@inheritdoc}
    */
   public function getForm(array &$original_form, FormStateInterface $form_state, array $additional_widget_parameters) {
-    $form = parent::getForm($original_form, $form_state, $additional_widget_parameters);
-    // TODO - do we need better error handling for view and view_display (in
-    // case either of those is nonexistent or display not of correct type)?
-    $form['#attached']['library'] = ['entity_browser/view'];
 
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var \Drupal\views\Entity\View $view */
     $view = $this->entityTypeManager
       ->getStorage('view')
-      ->load($this->configuration['view'])
-      ->getExecutable();
+      ->load($this->configuration['view']);
+
+    /** @var \Drupal\views\ViewExecutable $view */
+    $view_executable = $view->getExecutable();
+
+    /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+    $entity_browser = $this->entityTypeManager
+      ->getStorage('entity_browser')
+      ->load($this->configuration['entity_browser_id']);
+
+    $widget_entity_type = $this->getTargetEntityTypeId();
+    $widget_target_bundles = $this->getTargetBundles();
+    if (!empty($form_state->getStorage()['entity_browser']['widget_context'])) {
+      $widget_context = $form_state->getStorage()['entity_browser']['widget_context'];
+      if (!empty($widget_context['target_entity_type']) && $widget_context['target_entity_type'] != $widget_entity_type) {
+        return [
+          '#markup' => $this->getWrongEntityMessage($widget_context),
+        ];
+      }
+      elseif (!empty($widget_context['target_bundles']) && !empty($widget_target_bundles)) {
+        foreach ($widget_target_bundles as $widget_target_bundle) {
+          if (empty($widget_context['target_bundles'][$widget_target_bundle])) {
+            return [
+              '#markup' => $this->getWrongBundleMessage($widget_context),
+            ];
+          }
+        }
+      }
+    }
+
+    $form = parent::getForm($original_form, $form_state, $additional_widget_parameters);
+    $form['#attached']['library'] = ['entity_browser/view'];
+
+    // Check if the current user has access to this view.
+    if (!$view_executable->access($this->configuration['view_display'])) {
+      return [
+        '#markup' => $this->t('You do not have access to this View.'),
+      ];
+    }
 
     if (!empty($this->configuration['arguments'])) {
       if (!empty($additional_widget_parameters['path_parts'])) {
@@ -107,13 +140,13 @@ class View extends WidgetBase implements ContainerFactoryPluginInterface {
         foreach ($this->configuration['arguments'] as $argument) {
           $arguments[] = isset($additional_widget_parameters['path_parts'][$argument]) ? $additional_widget_parameters['path_parts'][$argument] : '';
         }
-        $view->setArguments(array_values($arguments));
+        $view_executable->setArguments(array_values($arguments));
       }
     }
 
-    $form['view'] = $view->executeDisplay($this->configuration['view_display']);
+    $form['view'] = $view_executable->executeDisplay($this->configuration['view_display']);
 
-    if (empty($view->field['entity_browser_select'])) {
+    if (empty($view_executable->field['entity_browser_select'])) {
       $url = Url::fromRoute('entity.view.edit_form', ['view' => $this->configuration['view']])->toString();
       if ($this->currentUser->hasPermission('administer views')) {
         return [
@@ -291,4 +324,49 @@ class View extends WidgetBase implements ContainerFactoryPluginInterface {
     return AccessResult::allowedIf($view->access($this->configuration['view_display']));
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetEntityTypeId() {
+
+    if (empty($this->configuration['view'])) {
+      return NULL;
+    }
+
+    /** @var \Drupal\views\ViewExecutable $view */
+    $view = $this->entityTypeManager
+      ->getStorage('view')
+      ->load($this->configuration['view'])
+      ->getExecutable();
+
+    return $view->getBaseEntityType()->id();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetBundles() {
+
+    if (empty($this->configuration['view']) || empty($this->configuration['view_display'])) {
+      return [];
+    }
+
+    /** @var \Drupal\views\ViewExecutable $view */
+    $view = $this->entityTypeManager
+      ->getStorage('view')
+      ->load($this->configuration['view'])
+      ->getExecutable();
+
+    /** @var \Drupal\views\Plugin\views\display\DisplayPluginInterface $display */
+    $display = $view->getDisplay($this->configuration['view_display']);
+
+    $filters = $display->getOption('filters');
+    if (!empty($filters['type']['value'])) {
+      return $filters['type']['value'];
+    }
+
+    return [];
+  }
+
+
 }
diff --git a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
index 6112844..e702777 100644
--- a/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
+++ b/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;
 
+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\entity_browser\Entity\EntityBrowser;
@@ -23,6 +24,7 @@ use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\entity_browser\WidgetEntityInfoInterface;
 
 /**
  * Plugin implementation of the 'entity_reference' widget for entity browser.
@@ -275,10 +277,10 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
   public static function validateSettingsForm($element, FormStateInterface $form_state, $form) {
 
     $values = NestedArray::getValue($form_state->getValues(), $element['#parents']);
+    /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+    $entity_browser = EntityBrowser::load($values['entity_browser']);
 
     if ($values['selection_mode'] == 'selection_edit') {
-      /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
-      $entity_browser = EntityBrowser::load($values['entity_browser']);
       if ($entity_browser->getSelectionDisplay()->supportsPreselection() === FALSE) {
         $tparams = [
           '%selection_mode' => EntityBrowserElement::getSelectionModeOptions()[EntityBrowserElement::SELECTION_MODE_EDIT],
@@ -286,8 +288,47 @@ class EntityReferenceBrowserWidget extends WidgetBase implements ContainerFactor
         ];
         $form_state->setError($element['entity_browser']);
         $form_state->setError($element['selection_mode'], t('The selection mode %selection_mode requires an entity browser with a selection display plugin that supports preselection.  Either change the selection mode or update the @browser_link entity browser to use a selection display plugin that supports preselection.', $tparams));
+        return;
       }
     }
+
+    $entity_type = $form['#entity_type'];
+    $bundle = $form['#bundle'];
+    $parents = array_slice($element['#array_parents'], -4, 1);
+    $field_name = end($parents);
+    $field_config = FieldConfig::loadByName($entity_type, $bundle, $field_name);
+    $target_entity_type = $field_config->getFieldStorageDefinition()->getSetting('target_type');
+    $handler_settings = $field_config->getSetting('handler_settings');
+    $target_bundles = !empty($handler_settings['target_bundles']) ? $handler_settings['target_bundles'] : [];
+
+    foreach ($entity_browser->getWidgets() as $key => $widget) {
+
+      // Skip validation if widget doesn't provide entity info with
+      // ::getTargetEntityTypeId and ::getTargetBundles methods.
+      if (!$widget instanceof WidgetEntityInfoInterface) {
+        continue;
+      }
+      $widget_entity_type = $widget->getTargetEntityTypeId();
+      if (!empty($widget_entity_type) && $widget_entity_type != $target_entity_type) {
+        $widget_context = [
+          'target_entity_type' => $target_entity_type,
+        ];
+        $form_state->setError($element['entity_browser'], $widget->getWrongEntityMessage($widget_context));
+        return;
+      }
+      elseif (!empty($target_bundles) && $widget_target_bundles = $widget->getTargetBundles()) {
+        foreach ($widget_target_bundles as $widget_target_bundle) {
+          if (empty($target_bundles[$widget_target_bundle])) {
+            $widget_context = [
+              'target_bundles' => $target_bundles,
+            ];
+            $form_state->setError($element['entity_browser'], $widget->getWrongBundleMessage($widget_context));
+            return;
+          }
+        }
+      }
+    }
+
   }
 
   /**
diff --git a/src/WidgetBase.php b/src/WidgetBase.php
index f5d2ea7..17e9b54 100644
--- a/src/WidgetBase.php
+++ b/src/WidgetBase.php
@@ -17,7 +17,7 @@ use Symfony\Component\Validator\ConstraintViolationList;
 /**
  * Base class for widget plugins.
  */
-abstract class WidgetBase extends PluginBase implements WidgetInterface, ContainerFactoryPluginInterface {
+abstract class WidgetBase extends PluginBase implements WidgetInterface, WidgetEntityInfoInterface, ContainerFactoryPluginInterface {
 
   use PluginConfigurationFormTrait;
 
@@ -107,6 +107,55 @@ abstract class WidgetBase extends PluginBase implements WidgetInterface, Contain
     );
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetEntityTypeId() {
+    return NULL;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getTargetBundles() {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getWrongEntityMessage(array $widget_context) {
+    /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+    $entity_browser = $this->entityTypeManager
+      ->getStorage('entity_browser')
+      ->load($this->configuration['entity_browser_id']);
+
+    $tparams = [
+      '%field_target_entity_type' => $this->entityTypeManager->getStorage($widget_context['target_entity_type'])->getEntityType()->getLabel(),
+      '@entity_browser_link' => $entity_browser->toLink($entity_browser->label(), 'edit-widgets')->toString(),
+      '@widget_type' => $this->getPluginDefinition()['label'],
+      '%widget_entity_target_type' => $this->entityTypeManager->getStorage($this->getTargetEntityTypeId())->getEntityType()->getLabel(),
+    ];
+
+    return $this->t('There is an entity type mismatch between the field target entity type %field_target_entity_type and the target entity type %widget_entity_target_type used by the @widget_type widget in the entity browser @entity_browser_link.', $tparams);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getWrongBundleMessage(array $widget_context) {
+    /** @var \Drupal\entity_browser\Entity\EntityBrowser $entity_browser */
+    $entity_browser = $this->entityTypeManager
+      ->getStorage('entity_browser')
+      ->load($this->configuration['entity_browser_id']);
+
+    $tparams = [
+      '@entity_browser_link' => $entity_browser->toLink($entity_browser->label(), 'edit-widgets')->toString(),
+      '@widget_type' => $this->getPluginDefinition()['label'],
+    ];
+    return $this->t('There is a mismatch between the field target bundles and the target bundles used by the @widget_type widget in the entity browser @entity_browser_link.', $tparams);
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/src/WidgetEntityInfoInterface.php b/src/WidgetEntityInfoInterface.php
new file mode 100644
index 0000000..719f499
--- /dev/null
+++ b/src/WidgetEntityInfoInterface.php
@@ -0,0 +1,38 @@
+<?php
+
+namespace Drupal\entity_browser;
+
+/**
+ * Provides an interface for widgets to expose entity and bundle info.
+ */
+interface WidgetEntityInfoInterface {
+
+  /**
+   * Get target entity type id.
+   *
+   * @return string|null
+   */
+  public function getTargetEntityTypeId();
+
+  /**
+   * Get target bundles.
+   *
+   * @return array
+   */
+  public function getTargetBundles();
+
+  /**
+   * Get message to display when entity type is wrong for the context.
+   *
+   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   */
+  public function getWrongEntityMessage(array $widget_context);
+
+  /**
+   * Get message to display when bundles are wrong for the context.
+   *
+   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   */
+  public function getWrongBundleMessage(array $widget_context);
+
+}
diff --git a/tests/modules/entity_browser_ief_test/config/install/entity_browser.browser.article_entity_form.yml b/tests/modules/entity_browser_ief_test/config/install/entity_browser.browser.article_entity_form.yml
new file mode 100644
index 0000000..42239b3
--- /dev/null
+++ b/tests/modules/entity_browser_ief_test/config/install/entity_browser.browser.article_entity_form.yml
@@ -0,0 +1,28 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - entity_browser_entity_form
+name: article_entity_form
+label: 'Article Entity Form'
+display: iframe
+display_configuration:
+  width: '650'
+  height: '500'
+  link_text: 'Select entities'
+  auto_open: false
+selection_display: no_display
+selection_display_configuration: {  }
+widget_selector: single
+widget_selector_configuration: {  }
+widgets:
+  c7bc5b48-059a-4dc4-b090-86b087044ec5:
+    settings:
+      entity_type: node
+      bundle: article
+      form_mode: default
+      submit_text: 'Save article'
+    uuid: c7bc5b48-059a-4dc4-b090-86b087044ec5
+    weight: 1
+    label: entity_form
+    id: entity_form
diff --git a/tests/modules/entity_browser_ief_test/config/install/entity_browser.browser.media_entity_form.yml b/tests/modules/entity_browser_ief_test/config/install/entity_browser.browser.media_entity_form.yml
new file mode 100644
index 0000000..3999d93
--- /dev/null
+++ b/tests/modules/entity_browser_ief_test/config/install/entity_browser.browser.media_entity_form.yml
@@ -0,0 +1,28 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - entity_browser_entity_form
+name: media_entity_form
+label: 'Media Entity Form'
+display: iframe
+display_configuration:
+  width: '650'
+  height: '500'
+  link_text: 'Select entities'
+  auto_open: false
+selection_display: no_display
+selection_display_configuration: {  }
+widget_selector: single
+widget_selector_configuration: {  }
+widgets:
+  68a36557-ad61-476c-aea6-5b464a02cf0f:
+    settings:
+      entity_type: media
+      bundle: image
+      form_mode: default
+      submit_text: 'Save entity'
+    uuid: 68a36557-ad61-476c-aea6-5b464a02cf0f
+    weight: 1
+    label: entity_form
+    id: entity_form
diff --git a/tests/modules/entity_browser_test/config/install/entity_browser.browser.media_image.yml b/tests/modules/entity_browser_test/config/install/entity_browser.browser.media_image.yml
new file mode 100644
index 0000000..9487e33
--- /dev/null
+++ b/tests/modules/entity_browser_test/config/install/entity_browser.browser.media_image.yml
@@ -0,0 +1,41 @@
+langcode: en
+status: true
+dependencies:
+  config:
+    - views.view.media_image
+  module:
+    - views
+name: media_image
+label: 'Media Image'
+display: iframe
+display_configuration:
+  width: '650'
+  height: '500'
+  link_text: 'Select entities'
+  auto_open: true
+selection_display: no_display
+selection_display_configuration: {  }
+widget_selector: tabs
+widget_selector_configuration: {  }
+widgets:
+  3679f2e6-b798-46fa-9d0d-2583f0687037:
+    settings:
+      extensions: 'jpg jpeg png gif'
+      media_type: image
+      upload_location: 'public://'
+      multiple: '1'
+      submit_text: 'Select files'
+    uuid: 3679f2e6-b798-46fa-9d0d-2583f0687037
+    weight: 1
+    label: media_image_upload
+    id: media_image_upload
+  c5c5eb37-07dd-4d38-baa9-b83454c2d4dd:
+    settings:
+      view: media_image
+      view_display: entity_browser_1
+      submit_text: 'Select media items'
+      auto_select: false
+    uuid: c5c5eb37-07dd-4d38-baa9-b83454c2d4dd
+    weight: 2
+    label: view
+    id: view
diff --git a/tests/modules/entity_browser_test/config/install/entity_browser.browser.type_filter.yml b/tests/modules/entity_browser_test/config/install/entity_browser.browser.type_filter.yml
new file mode 100644
index 0000000..5332817
--- /dev/null
+++ b/tests/modules/entity_browser_test/config/install/entity_browser.browser.type_filter.yml
@@ -0,0 +1,35 @@
+langcode: en
+status: true
+dependencies:
+  config:
+    - views.view.type_filter
+  module:
+    - views
+name: type_filter
+label: 'Type Filter'
+display: iframe
+display_configuration:
+  width: '650'
+  height: '500'
+  link_text: 'Select entities'
+  auto_open: true
+selection_display: multi_step_display
+selection_display_configuration:
+  entity_type: node
+  display: label
+  display_settings: {  }
+  select_text: 'Use selected'
+  selection_hidden: false
+widget_selector: single
+widget_selector_configuration: {  }
+widgets:
+  fe948d49-73b1-45d3-8560-0db5f8cfc79b:
+    settings:
+      view: type_filter
+      view_display: entity_browser_1
+      submit_text: 'Select entities'
+      auto_select: false
+    uuid: fe948d49-73b1-45d3-8560-0db5f8cfc79b
+    weight: 1
+    label: view
+    id: view
diff --git a/tests/modules/entity_browser_test/config/install/media.type.image.yml b/tests/modules/entity_browser_test/config/install/media.type.image.yml
new file mode 100644
index 0000000..8cf9b23
--- /dev/null
+++ b/tests/modules/entity_browser_test/config/install/media.type.image.yml
@@ -0,0 +1,13 @@
+langcode: en
+status: true
+dependencies: {  }
+id: image
+label: 'Media Image'
+description: ''
+source: image
+queue_thumbnail_downloads: false
+new_revision: false
+source_configuration:
+  source_field: field_media_image
+field_map:
+  name: name
diff --git a/tests/modules/entity_browser_test/config/install/views.view.media_image.yml b/tests/modules/entity_browser_test/config/install/views.view.media_image.yml
new file mode 100644
index 0000000..3a291f5
--- /dev/null
+++ b/tests/modules/entity_browser_test/config/install/views.view.media_image.yml
@@ -0,0 +1,210 @@
+langcode: en
+status: true
+dependencies:
+  config:
+    - media.type.image
+  module:
+    - entity_browser
+    - media
+    - user
+id: media_image
+label: 'Media Image'
+module: views
+description: ''
+tag: ''
+base_table: media_field_data
+base_field: mid
+core: 8.x
+display:
+  default:
+    display_plugin: default
+    id: default
+    display_title: Master
+    position: 0
+    display_options:
+      access:
+        type: perm
+        options:
+          perm: 'view media'
+      cache:
+        type: tag
+        options: {  }
+      query:
+        type: views_query
+        options:
+          disable_sql_rewrite: false
+          distinct: false
+          replica: false
+          query_comment: ''
+          query_tags: {  }
+      exposed_form:
+        type: basic
+        options:
+          submit_button: Apply
+          reset_button: false
+          reset_button_label: Reset
+          exposed_sorts_label: 'Sort by'
+          expose_sort_order: true
+          sort_asc_label: Asc
+          sort_desc_label: Desc
+      pager:
+        type: mini
+        options:
+          items_per_page: 10
+          offset: 0
+          id: 0
+          total_pages: null
+          expose:
+            items_per_page: false
+            items_per_page_label: 'Items per page'
+            items_per_page_options: '5, 10, 25, 50'
+            items_per_page_options_all: false
+            items_per_page_options_all_label: '- All -'
+            offset: false
+            offset_label: Offset
+          tags:
+            previous: ‹‹
+            next: ››
+      style:
+        type: default
+        options:
+          grouping: {  }
+          row_class: ''
+          default_row_class: true
+          uses_fields: false
+      row:
+        type: fields
+        options:
+          inline: {  }
+          separator: ''
+          hide_empty: false
+          default_field_elements: true
+      fields:
+        entity_browser_select:
+          id: entity_browser_select
+          table: media
+          field: entity_browser_select
+          relationship: none
+          group_type: group
+          admin_label: ''
+          label: ''
+          exclude: false
+          alter:
+            alter_text: false
+            text: ''
+            make_link: false
+            path: ''
+            absolute: false
+            external: false
+            replace_spaces: false
+            path_case: none
+            trim_whitespace: false
+            alt: ''
+            rel: ''
+            link_class: ''
+            prefix: ''
+            suffix: ''
+            target: ''
+            nl2br: false
+            max_length: 0
+            word_boundary: true
+            ellipsis: true
+            more_link: false
+            more_link_text: ''
+            more_link_path: ''
+            strip_tags: false
+            trim: false
+            preserve_tags: ''
+            html: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: false
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_empty: false
+          empty_zero: false
+          hide_alter_empty: true
+          entity_type: media
+          plugin_id: entity_browser_select
+        name:
+          id: name
+          table: media_field_data
+          field: name
+          entity_type: media
+          entity_field: media
+          label: ''
+          alter:
+            alter_text: false
+            make_link: false
+            absolute: false
+            trim: false
+            word_boundary: false
+            ellipsis: false
+            strip_tags: false
+            html: false
+          hide_empty: false
+          empty_zero: false
+          settings:
+            link_to_entity: true
+          plugin_id: field
+          relationship: none
+          group_type: group
+          admin_label: ''
+          exclude: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: true
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_alter_empty: true
+          click_sort_column: value
+          type: string
+          group_column: value
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+      filters: {  }
+      sorts: {  }
+      header: {  }
+      footer: {  }
+      empty: {  }
+      relationships: {  }
+      arguments: {  }
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url.query_args
+        - user.permissions
+      tags: {  }
+  entity_browser_1:
+    display_plugin: entity_browser
+    id: entity_browser_1
+    display_title: 'Entity browser'
+    position: 1
+    display_options:
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url.query_args
+        - user.permissions
+      tags: {  }
diff --git a/tests/modules/entity_browser_test/config/install/views.view.type_filter.yml b/tests/modules/entity_browser_test/config/install/views.view.type_filter.yml
new file mode 100644
index 0000000..c2e5f05
--- /dev/null
+++ b/tests/modules/entity_browser_test/config/install/views.view.type_filter.yml
@@ -0,0 +1,267 @@
+langcode: en
+status: true
+dependencies:
+  config:
+    - node.type.article
+  module:
+    - entity_browser
+    - node
+    - user
+id: type_filter
+label: 'Type Filter'
+module: views
+description: ''
+tag: ''
+base_table: node_field_data
+base_field: nid
+core: 8.x
+display:
+  default:
+    display_plugin: default
+    id: default
+    display_title: Master
+    position: 0
+    display_options:
+      access:
+        type: perm
+        options:
+          perm: 'access content'
+      cache:
+        type: tag
+        options: {  }
+      query:
+        type: views_query
+        options:
+          disable_sql_rewrite: false
+          distinct: false
+          replica: false
+          query_comment: ''
+          query_tags: {  }
+      exposed_form:
+        type: basic
+        options:
+          submit_button: Apply
+          reset_button: false
+          reset_button_label: Reset
+          exposed_sorts_label: 'Sort by'
+          expose_sort_order: true
+          sort_asc_label: Asc
+          sort_desc_label: Desc
+      pager:
+        type: mini
+        options:
+          items_per_page: 10
+          offset: 0
+          id: 0
+          total_pages: null
+          expose:
+            items_per_page: false
+            items_per_page_label: 'Items per page'
+            items_per_page_options: '5, 10, 25, 50'
+            items_per_page_options_all: false
+            items_per_page_options_all_label: '- All -'
+            offset: false
+            offset_label: Offset
+          tags:
+            previous: ‹‹
+            next: ››
+      style:
+        type: default
+        options:
+          grouping: {  }
+          row_class: ''
+          default_row_class: true
+          uses_fields: false
+      row:
+        type: fields
+        options:
+          inline: {  }
+          separator: ''
+          hide_empty: false
+          default_field_elements: true
+      fields:
+        entity_browser_select:
+          id: entity_browser_select
+          table: node
+          field: entity_browser_select
+          relationship: none
+          group_type: group
+          admin_label: ''
+          label: ''
+          exclude: false
+          alter:
+            alter_text: false
+            text: ''
+            make_link: false
+            path: ''
+            absolute: false
+            external: false
+            replace_spaces: false
+            path_case: none
+            trim_whitespace: false
+            alt: ''
+            rel: ''
+            link_class: ''
+            prefix: ''
+            suffix: ''
+            target: ''
+            nl2br: false
+            max_length: 0
+            word_boundary: true
+            ellipsis: true
+            more_link: false
+            more_link_text: ''
+            more_link_path: ''
+            strip_tags: false
+            trim: false
+            preserve_tags: ''
+            html: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: false
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_empty: false
+          empty_zero: false
+          hide_alter_empty: true
+          entity_type: node
+          plugin_id: entity_browser_select
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          entity_type: node
+          entity_field: title
+          label: ''
+          alter:
+            alter_text: false
+            make_link: false
+            absolute: false
+            trim: false
+            word_boundary: false
+            ellipsis: false
+            strip_tags: false
+            html: false
+          hide_empty: false
+          empty_zero: false
+          settings:
+            link_to_entity: true
+          plugin_id: field
+          relationship: none
+          group_type: group
+          admin_label: ''
+          exclude: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: true
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_alter_empty: true
+          click_sort_column: value
+          type: string
+          group_column: value
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+      filters:
+        type:
+          id: type
+          table: node_field_data
+          field: type
+          relationship: none
+          group_type: group
+          admin_label: ''
+          operator: in
+          value:
+            article: article
+          group: 1
+          exposed: false
+          expose:
+            operator_id: ''
+            label: ''
+            description: ''
+            use_operator: false
+            operator: ''
+            identifier: ''
+            required: false
+            remember: false
+            multiple: false
+            remember_roles:
+              authenticated: authenticated
+            reduce: false
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: {  }
+            group_items: {  }
+          entity_type: node
+          entity_field: type
+          plugin_id: bundle
+      sorts:
+        created:
+          id: created
+          table: node_field_data
+          field: created
+          order: DESC
+          entity_type: node
+          entity_field: created
+          plugin_id: date
+          relationship: none
+          group_type: group
+          admin_label: ''
+          exposed: false
+          expose:
+            label: ''
+          granularity: second
+      header: {  }
+      footer: {  }
+      empty: {  }
+      relationships: {  }
+      arguments: {  }
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url.query_args
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
+  entity_browser_1:
+    display_plugin: entity_browser
+    id: entity_browser_1
+    display_title: 'Entity browser'
+    position: 1
+    display_options:
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url.query_args
+        - 'user.node_grants:view'
+        - user.permissions
+      tags: {  }
diff --git a/tests/modules/entity_browser_test/entity_browser_test.info.yml b/tests/modules/entity_browser_test/entity_browser_test.info.yml
index fea7510..e8d0644 100644
--- a/tests/modules/entity_browser_test/entity_browser_test.info.yml
+++ b/tests/modules/entity_browser_test/entity_browser_test.info.yml
@@ -6,6 +6,7 @@ package: Testing
 dependencies:
   - entity_browser:entity_browser
   - drupal:file
+  - drupal:media (>= 8.4)
   - drupal:user
   - drupal:node
   - drupal:views
diff --git a/tests/src/FunctionalJavascript/EntityBrowserTest.php b/tests/src/FunctionalJavascript/EntityBrowserTest.php
index cefbed4..aba7756 100644
--- a/tests/src/FunctionalJavascript/EntityBrowserTest.php
+++ b/tests/src/FunctionalJavascript/EntityBrowserTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+
 /**
  * Tests the entity_browser.
  *
@@ -269,6 +273,32 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
    * Tests the EntityBrowserWidgetContext default argument plugin.
    */
   public function testEntityBrowserWidgetContext() {
+
+    FieldStorageConfig::create([
+      'field_name' => 'field_galaxy',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => 'node',
+      ],
+    ])->save();
+
+    FieldConfig::create([
+      'field_name' => 'field_galaxy',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+      'label' => 'Reference',
+      'settings' => [
+        'handler_settings' => [
+          'target_bundles' => [
+            'shark' => 'shark',
+            'jet' => 'jet',
+          ],
+        ],
+      ],
+    ])->save();
+
     $this->createNode(['type' => 'shark', 'title' => 'Luke']);
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);
@@ -278,7 +308,8 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ->getStorage('entity_form_display')
       ->load('node.article.default');
 
-    $form_display->setComponent('field_reference', [
+    $form_display->removeComponent('field_reference');
+    $form_display->setComponent('field_galaxy', [
       'type' => 'entity_browser_entity_reference',
       'settings' => [
         'entity_browser' => 'widget_context_default_value',
@@ -287,18 +318,6 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ],
     ])->save();
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
-    $field_config = $this->container->get('entity_type.manager')
-      ->getStorage('field_config')
-      ->load('node.article.field_reference');
-    $handler_settings = $field_config->getSetting('handler_settings');
-    $handler_settings['target_bundles'] = [
-      'shark' => 'shark',
-      'jet' => 'jet',
-    ];
-    $field_config->setSetting('handler_settings', $handler_settings);
-    $field_config->save();
-
     // Set auto open to false on the entity browser.
     $entity_browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
@@ -330,7 +349,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
-      ->load('node.article.field_reference');
+      ->load('node.article.field_galaxy');
     $handler_settings = $field_config->getSetting('handler_settings');
     $handler_settings['target_bundles'] = [
       'article' => 'article',
@@ -357,6 +376,31 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
    */
   public function testContextualBundle() {
 
+    FieldStorageConfig::create([
+      'field_name' => 'field_galaxy',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => 'node',
+      ],
+    ])->save();
+
+    FieldConfig::create([
+      'field_name' => 'field_galaxy',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+      'label' => 'Reference',
+      'settings' => [
+        'handler_settings' => [
+          'target_bundles' => [
+            'shark' => 'shark',
+            'jet' => 'jet',
+          ],
+        ],
+      ],
+    ])->save();
+
     $this->createNode(['type' => 'shark', 'title' => 'Luke']);
     $this->createNode(['type' => 'jet', 'title' => 'Leia']);
     $this->createNode(['type' => 'article', 'title' => 'Darth']);
@@ -366,7 +410,8 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ->getStorage('entity_form_display')
       ->load('node.article.default');
 
-    $form_display->setComponent('field_reference', [
+    $form_display->removeComponent('field_reference');
+    $form_display->setComponent('field_galaxy', [
       'type' => 'entity_browser_entity_reference',
       'settings' => [
         'entity_browser' => 'bundle_filter',
@@ -375,18 +420,6 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ],
     ])->save();
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
-    $field_config = $this->container->get('entity_type.manager')
-      ->getStorage('field_config')
-      ->load('node.article.field_reference');
-    $handler_settings = $field_config->getSetting('handler_settings');
-    $handler_settings['target_bundles'] = [
-      'shark' => 'shark',
-      'jet' => 'jet',
-    ];
-    $field_config->setSetting('handler_settings', $handler_settings);
-    $field_config->save();
-
     // Set auto open to false on the entity browser.
     $entity_browser = $this->container->get('entity_type.manager')
       ->getStorage('entity_browser')
@@ -418,7 +451,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
-      ->load('node.article.field_reference');
+      ->load('node.article.field_galaxy');
     $handler_settings = $field_config->getSetting('handler_settings');
     $handler_settings['target_bundles'] = [
       'article' => 'article',
@@ -444,6 +477,31 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
    */
   public function testContextualBundleExposed() {
 
+    FieldStorageConfig::create([
+      'field_name' => 'field_galaxy',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => 'node',
+      ],
+    ])->save();
+
+    FieldConfig::create([
+      'field_name' => 'field_galaxy',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+      'label' => 'Reference',
+      'settings' => [
+        'handler_settings' => [
+          'target_bundles' => [
+            'shark' => 'shark',
+            'jet' => 'jet',
+          ],
+        ],
+      ],
+    ])->save();
+
     $this->config('entity_browser.browser.bundle_filter')
       ->set('widgets.b882a89d-9ce4-4dfe-9802-62df93af232a.settings.view', 'bundle_filter_exposed')
       ->save();
@@ -457,7 +515,8 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
       ->getStorage('entity_form_display')
       ->load('node.article.default');
 
-    $form_display->setComponent('field_reference', [
+    $form_display->removeComponent('field_reference');
+    $form_display->setComponent('field_galaxy', [
       'type' => 'entity_browser_entity_reference',
       'settings' => [
         'entity_browser' => 'bundle_filter',
@@ -537,7 +596,7 @@ class EntityBrowserTest extends EntityBrowserWebDriverTestBase {
     /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
     $field_config = $this->container->get('entity_type.manager')
       ->getStorage('field_config')
-      ->load('node.article.field_reference');
+      ->load('node.article.field_galaxy');
     $handler_settings = $field_config->getSetting('handler_settings');
     $handler_settings['target_bundles'] = [
       'article' => 'article',
diff --git a/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php b/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
index 151d18a..fbd5a99 100644
--- a/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
+++ b/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
@@ -26,6 +26,7 @@ class FieldWidgetConfigTest extends WebDriverTestBase {
   protected static $modules = [
     'entity_browser',
     'entity_browser_test',
+    'entity_browser_ief_test',
     'block',
     'node',
     'taxonomy',
@@ -170,18 +171,22 @@ class FieldWidgetConfigTest extends WebDriverTestBase {
     ]);
     $field->save();
 
+    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    $form_display = $this->container->get('entity_type.manager')
+      ->getStorage('entity_form_display')
+      ->load('node.article.default');
+
+    $form_display->setComponent('field_dalek', [
+      'type' => 'entity_browser_entity_reference',
+      'settings' => [
+        'entity_browser' => 'widget_context_default_value',
+        'field_widget_display' => 'label',
+        'open' => TRUE,
+      ],
+    ])->save();
+
     $this->drupalGet('/admin/structure/types/manage/article/form-display');
-    // Drag to enabled.
-    $target = $this->assertSession()
-      ->elementExists('css', '#title');
-    $this->assertSession()
-      ->elementExists('css', '#field-dalek')
-      ->find('css', '.handle')
-      ->dragTo($target);
-    $this->assertSession()->assertWaitOnAjaxRequest();
-    // Set to Entity Browser Widget.
-    $this->assertSession()->selectExists('fields[field_dalek][type]')->selectOption('entity_browser_entity_reference');
-    $this->assertSession()->assertWaitOnAjaxRequest();
+
     // Open settings form.
     $this->assertSession()->waitforButton('field_dalek_settings_edit')->press();
     $this->assertSession()->assertWaitOnAjaxRequest();
@@ -202,7 +207,7 @@ class FieldWidgetConfigTest extends WebDriverTestBase {
     $this->assertSession()->pageTextContains($error_message);
 
     // Switch to an entity browser that supports preselection.
-    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('test_entity_browser_iframe_view');
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('widget_context_default_value');
 
     $this->assertSession()->buttonExists('field_dalek_plugin_settings_update')->press();
     $this->assertSession()->assertWaitOnAjaxRequest();
@@ -211,14 +216,328 @@ class FieldWidgetConfigTest extends WebDriverTestBase {
 
     $this->assertSession()->buttonExists('Save')->press();
 
-    // Update selected entity browser so it will trigger a warning.
-    $entity_browser = EntityBrowser::load('test_entity_browser_iframe_view');
+    // Update selected entity browser so it will trigger a warning when viewed.
+    $entity_browser = EntityBrowser::load('widget_context_default_value');
     $entity_browser->setSelectionDisplay('no_display');
     $entity_browser->save();
 
     $this->drupalGet('/node/add/article');
     // Error message should be shown.
-    $this->assertSession()->pageTextContains('There is a configuration problem with field "Seek! Locate! Exterminate!". The selection mode Edit selection requires an entity browser with a selection display plugin that supports preselection. Either change the selection mode or update the Test entity browser iframe with view widget entity browser to use a selection display plugin that supports preselection.');
+    $this->assertSession()->pageTextContains('There is a configuration problem with field "Seek! Locate! Exterminate!". The selection mode Edit selection requires an entity browser with a selection display plugin that supports preselection. Either change the selection mode or update the Widget Context Default Value entity browser to use a selection display plugin that supports preselection.');
+
+  }
+
+  /**
+   * Tests validation of entity type and bundle of the View widget.
+   *
+   * User should be prevented from selecting an entity browser using a view
+   * widget with a view targeting the wrong entity or wrong bundles.
+   */
+  public function testViewValidation() {
+
+    // Create an entity_reference field to test the widget.
+    $field_storage = FieldStorageConfig::create([
+      'field_name' => 'field_sharks',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => 'node',
+      ],
+    ]);
+    $field_storage->save();
+
+    $field = FieldConfig::create([
+      'field_name' => 'field_sharks',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+      'label' => 'Referenced Sharks',
+      'settings' => [
+        'handler_settings' => [
+          'target_bundles' => [
+            'shark' => 'shark',
+          ],
+        ],
+      ],
+    ]);
+    $field->save();
+
+    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    $form_display = $this->container->get('entity_type.manager')
+      ->getStorage('entity_form_display')
+      ->load('node.article.default');
+
+    $form_display->setComponent('field_sharks', [
+      'type' => 'entity_browser_entity_reference',
+      'settings' => [
+        'entity_browser' => 'type_filter',
+        'field_widget_display' => 'label',
+        'open' => TRUE,
+      ],
+    ])->save();
+
+    $this->drupalGet('/admin/structure/types/manage/article/form-display');
+
+    // Open settings form.
+    $this->assertSession()->waitforButton('field_sharks_settings_edit')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $form_prefix = 'fields[field_sharks][settings_edit_form][settings]';
+
+    // Select entity browser with wrong entity type on a widget.
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('test_entity_browser_file');
+    $this->assertSession()->buttonExists('field_sharks_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $this->assertSession()->pageTextContains('There is an entity type mismatch between the field target entity type Content and the target entity type File used by the View widget in the entity browser Test entity browser file.');
+
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('type_filter');
+    $this->assertSession()->buttonExists('field_sharks_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $bundle_error = "There is a mismatch between the field target bundles and the target bundles used by the View widget in the entity browser Type Filter.";
+
+    $this->assertSession()->pageTextContains($bundle_error);
+
+    $field_config = FieldConfig::loadByName('node', 'article', 'field_sharks');
+    $field_config->setSetting('handler_settings', [
+      'target_bundles' => [
+        'article' => 'article',
+      ],
+    ]);
+    $field_config->save();
+
+    $this->assertSession()->buttonExists('field_sharks_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $this->assertSession()->pageTextNotContains($bundle_error);
+
+  }
+
+  /**
+   * Tests entity validation of upload widget.
+   *
+   * User should be prevented from selecting entity browser using this widget on a media reference field.
+   */
+  public function testUploadValidation() {
+
+    // Create an entity_reference field to test the widget.
+    $field_storage = FieldStorageConfig::create([
+      'field_name' => 'field_media_image',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => 'media',
+      ],
+    ]);
+    $field_storage->save();
+
+    $field = FieldConfig::create([
+      'field_name' => 'field_media_image',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+      'label' => 'Images',
+      'settings' => [
+        'handler_settings' => [
+          'target_bundles' => [
+            'image' => 'image',
+          ],
+        ],
+      ],
+    ]);
+    $field->save();
+
+    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    $form_display = $this->container->get('entity_type.manager')
+      ->getStorage('entity_form_display')
+      ->load('node.article.default');
+
+    $form_display->setComponent('field_media_image', [
+      'type' => 'entity_browser_entity_reference',
+      'settings' => [
+        'entity_browser' => 'media_image',
+        'field_widget_display' => 'label',
+        'open' => TRUE,
+      ],
+    ])->save();
+
+    $this->drupalGet('/admin/structure/types/manage/article/form-display');
+
+    // Open settings form.
+    $this->assertSession()->waitforButton('field_media_image_settings_edit')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $form_prefix = 'fields[field_media_image][settings_edit_form][settings]';
+
+    // Select entity browser with wrong entity type on a widget.
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('test_entity_browser_iframe');
+    $this->assertSession()->buttonExists('field_media_image_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $entity_error = 'There is an entity type mismatch between the field target entity type Media and the target entity type File used by the Upload widget in the entity browser Test entity browser iframe.';
+
+    $this->assertSession()->pageTextContains($entity_error);
+
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('media_image');
+    $this->assertSession()->buttonExists('field_media_image_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $this->assertSession()->pageTextNotContains($entity_error);
+
+  }
+
+  /**
+   * Tests entity validation of MediaImageUpload widget.
+   *
+   * User should be prevented from selecting entity browser using this widget on file field.
+   */
+  public function testMediaUploadValidation() {
+
+    // Create an entity_reference field to test the widget.
+    $field_storage = FieldStorageConfig::create([
+      'field_name' => 'field_file',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => 'file',
+      ],
+    ]);
+    $field_storage->save();
+
+    $field = FieldConfig::create([
+      'field_name' => 'field_file',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+      'label' => 'Files',
+      'settings' => [],
+    ]);
+    $field->save();
+
+    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    $form_display = $this->container->get('entity_type.manager')
+      ->getStorage('entity_form_display')
+      ->load('node.article.default');
+
+    $form_display->setComponent('field_file', [
+      'type' => 'entity_browser_entity_reference',
+      'settings' => [
+        'entity_browser' => 'test_entity_browser_file',
+        'field_widget_display' => 'label',
+        'open' => TRUE,
+      ],
+    ])->save();
+
+    $this->drupalGet('/admin/structure/types/manage/article/form-display');
+
+    // Open settings form.
+    $this->assertSession()->waitforButton('field_file_settings_edit')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $form_prefix = 'fields[field_file][settings_edit_form][settings]';
+
+    // Select entity browser with wrong entity type on a widget.
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('media_image');
+    $this->assertSession()->buttonExists('field_file_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $entity_error = 'There is an entity type mismatch between the field target entity type File and the target entity type Media used by the Upload images as media items widget in the entity browser Media Image.';
+
+    $this->assertSession()->pageTextContains($entity_error);
+
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('test_entity_browser_file');
+    $this->assertSession()->buttonExists('field_file_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $this->assertSession()->pageTextNotContains($entity_error);
+
+  }
+
+  /**
+   * Tests entity validation of EntityForm widget.
+   *
+   * User should be prevented from selecting entity browser using this widget
+   * configured for another entity type or bundle than the field widget's
+   * settings.
+   */
+  public function testEntityFormValidation() {
+
+    // Create an entity_reference field to test the widget.
+    $field_storage = FieldStorageConfig::create([
+      'field_name' => 'field_sharks',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => 'node',
+      ],
+    ]);
+    $field_storage->save();
+
+    $field = FieldConfig::create([
+      'field_name' => 'field_sharks',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+      'label' => 'Referenced Sharks',
+      'settings' => [
+        'handler_settings' => [
+          'target_bundles' => [
+            'shark' => 'shark',
+          ],
+        ],
+      ],
+    ]);
+    $field->save();
+
+    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    $form_display = $this->container->get('entity_type.manager')
+      ->getStorage('entity_form_display')
+      ->load('node.article.default');
+
+    $form_display->setComponent('field_sharks', [
+      'type' => 'entity_browser_entity_reference',
+      'settings' => [
+        'entity_browser' => 'widget_context_default_value',
+        'field_widget_display' => 'label',
+        'open' => TRUE,
+      ],
+    ])->save();
+
+    $this->drupalGet('/admin/structure/types/manage/article/form-display');
+
+    // Open settings form.
+    $this->assertSession()->waitforButton('field_sharks_settings_edit')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $form_prefix = 'fields[field_sharks][settings_edit_form][settings]';
+
+    // Select entity browser with wrong entity type on a widget.
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('media_entity_form');
+    $this->assertSession()->buttonExists('field_sharks_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $this->assertSession()->pageTextContains('There is an entity type mismatch between the field target entity type Content and the target entity type Media used by the Entity form widget in the entity browser Media Entity Form.');
+
+    $this->assertSession()->selectExists($form_prefix . '[entity_browser]')->selectOption('article_entity_form');
+    $this->assertSession()->buttonExists('field_sharks_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $bundle_error = "There is a mismatch between the field target bundles and the target bundles used by the Entity form widget in the entity browser Article Entity Form.";
+
+    $this->assertSession()->pageTextContains($bundle_error);
+
+    $field_config = FieldConfig::loadByName('node', 'article', 'field_sharks');
+    $field_config->setSetting('handler_settings', [
+      'target_bundles' => [
+        'article' => 'article',
+      ],
+    ]);
+    $field_config->save();
+
+    $this->assertSession()->buttonExists('field_sharks_plugin_settings_update')->press();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+
+    $this->assertSession()->pageTextNotContains($bundle_error);
+
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/WidgetFormValidationTest.php b/tests/src/FunctionalJavascript/WidgetFormValidationTest.php
new file mode 100644
index 0000000..2be72fc
--- /dev/null
+++ b/tests/src/FunctionalJavascript/WidgetFormValidationTest.php
@@ -0,0 +1,245 @@
+<?php
+
+namespace Drupal\Tests\entity_browser\FunctionalJavascript;
+
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\entity_browser\Entity\EntityBrowser;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+
+/**
+ * Tests the entity browser form element.
+ *
+ * @group entity_browser
+ */
+class WidgetFormValidationTest extends WebDriverTestBase {
+
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  protected static $modules = [
+    'entity_browser',
+    'entity_browser_test',
+    'entity_browser_ief_test',
+    'block',
+    'node',
+    'taxonomy',
+    'views',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+    $this->drupalPlaceBlock('local_tasks_block');
+    $this->drupalPlaceBlock('local_actions_block');
+
+    $this->adminUser = $this->drupalCreateUser([
+      'administer entity browsers',
+      'access administration pages',
+      'administer nodes',
+      'create article content',
+      'access media_image entity browser pages',
+      'access type_filter entity browser pages',
+      'access test_entity_browser_iframe entity browser pages',
+      'access media_entity_form entity browser pages',
+      'access article_entity_form entity browser pages',
+      'access content',
+      'create media',
+    ]);
+
+    $this->drupalLogin($this->adminUser);
+  }
+
+  /**
+   * Helper function to add a field to a node type with an entity browser.
+   *
+   * @param string $bundle
+   *   The target node bundle.
+   * @param string $field_name
+   *   The new field's name.
+   * @param string $entity_browser_id
+   *   The entity browser to set on the form display.
+   * @param string $target_entity_type
+   *   The target entity type.
+   * @param array $target_bundles
+   *   An array of target bundles.
+   *
+   * @throws \Drupal\Core\Entity\EntityStorageException
+   */
+  protected function setUpField($bundle, $field_name, $entity_browser_id, $target_entity_type, array $target_bundles) {
+
+    // Create an entity_reference field to test the widget.
+    $field_storage = FieldStorageConfig::create([
+      'field_name' => $field_name,
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+      'settings' => [
+        'target_type' => $target_entity_type,
+      ],
+    ]);
+    $field_storage->save();
+
+    $field_config_settings = [
+      'field_name' => $field_name,
+      'entity_type' => 'node',
+      'bundle' => $bundle,
+      'label' => $field_name,
+      'settings' => [],
+    ];
+
+    if (!empty($target_bundles)) {
+      $field_config_settings['settings'] = [
+        'handler_settings' => [
+          'target_bundles' => $target_bundles,
+        ],
+      ];
+    }
+
+    $field = FieldConfig::create($field_config_settings);
+    $field->save();
+
+    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    $form_display = $this->container->get('entity_type.manager')
+      ->getStorage('entity_form_display')
+      ->load('node.' . $bundle . '.default');
+
+    $form_display->setComponent($field_name, [
+      'type' => 'entity_browser_entity_reference',
+      'settings' => [
+        'entity_browser' => $entity_browser_id,
+        'field_widget_display' => 'label',
+        'open' => TRUE,
+      ],
+    ])->save();
+
+    $browser = EntityBrowser::load($entity_browser_id);
+
+    $browser->getDisplay()
+      ->setConfiguration([
+        'width' => 650,
+        'height' => 500,
+        'link_text' => 'Select entities',
+        'auto_open' => TRUE,
+      ]);
+    $browser->setSelectionDisplay('no_display');
+    $browser->save();
+  }
+
+  /**
+   * Tests View widget behavior when target entity type is wrong for widget context.
+   */
+  public function testWrongViewEntity() {
+
+    $entity_browser_id = 'media_image';
+    $target_bundles = [
+      'shark' => 'shark',
+    ];
+    $this->setUpField('article', 'field_sharks', $entity_browser_id, 'node', $target_bundles);
+
+    $entity_browser = EntityBrowser::load($entity_browser_id);
+    $entity_browser->getWidgets()->removeInstanceId('3679f2e6-b798-46fa-9d0d-2583f0687037');
+    $entity_browser->save();
+
+    $this->drupalGet('/node/add/article');
+
+    $this->getSession()->switchToIFrame('entity_browser_iframe_' . $entity_browser_id);
+
+    $this->assertSession()->pageTextContains('There is an entity type mismatch between the field target entity type Content and the target entity type Media used by the View widget in the entity browser Media Image.');
+
+  }
+
+  /**
+   * Tests View widget behavior when target bundles are mismatch bundles in widget context.
+   */
+  public function testWrongViewBundle() {
+    $entity_browser_id = 'type_filter';
+    $target_bundles = [
+      'shark' => 'shark',
+    ];
+    $this->setUpField('article', 'field_sharks', $entity_browser_id, 'node', $target_bundles);
+
+    $this->drupalGet('/node/add/article');
+
+    $this->getSession()->switchToIFrame('entity_browser_iframe_' . $entity_browser_id);
+
+    $this->assertSession()->pageTextContains("There is a mismatch between the field target bundles and the target bundles used by the View widget in the entity browser Type Filter.");
+  }
+
+  /**
+   * Tests Upload widget behavior when target entity type is not file.
+   */
+  public function testWrongUploadEntity() {
+    $entity_browser_id = 'test_entity_browser_iframe';
+    $target_bundles = [
+      'image' => 'image',
+    ];
+    $this->setUpField('article', 'field_sharks', $entity_browser_id, 'media', $target_bundles);
+
+    $this->drupalGet('/node/add/article');
+
+    $this->getSession()->switchToIFrame('entity_browser_iframe_' . $entity_browser_id);
+
+    $this->assertSession()->pageTextContains('There is an entity type mismatch between the field target entity type Media and the target entity type File used by the Upload widget in the entity browser Test entity browser iframe.');
+
+  }
+
+  /**
+   * Tests MediaUpload widget behavior when target entity type is not media.
+   */
+  public function testWrongMediaUploadEntity() {
+
+    $entity_browser_id = 'media_image';
+    $target_bundles = [];
+    $this->setUpField('article', 'field_files', $entity_browser_id, 'file', $target_bundles);
+
+    $this->drupalGet('/node/add/article');
+
+    $this->getSession()->switchToIFrame('entity_browser_iframe_' . $entity_browser_id);
+
+    $this->assertSession()->pageTextContains('There is an entity type mismatch between the field target entity type File and the target entity type Media used by the Upload images as media items widget in the entity browser Media Image.');
+
+  }
+
+  /**
+   * Tests EntityForm widget behavior when target entity type is wrong for widget context.
+   */
+  public function testWrongEntityFormEntity() {
+
+    $entity_browser_id = 'media_entity_form';
+    $target_bundles = [
+      'shark' => 'shark',
+    ];
+    $this->setUpField('article', 'field_sharks', $entity_browser_id, 'node', $target_bundles);
+
+    $this->drupalGet('/node/add/article');
+
+    $this->getSession()->switchToIFrame('entity_browser_iframe_' . $entity_browser_id);
+
+    $this->assertSession()->pageTextContains("There is an entity type mismatch between the field target entity type Content and the target entity type Media used by the Entity form widget in the entity browser Media Entity Form.");
+
+  }
+
+  /**
+   * Tests EntityForm widget behavior when target bundle is wrong for widget context.
+   */
+  public function testWrongEntityFormBundle() {
+    $entity_browser_id = 'article_entity_form';
+    $target_bundles = [
+      'shark' => 'shark',
+    ];
+    $this->setUpField('article', 'field_sharks', $entity_browser_id, 'node', $target_bundles);
+
+    $this->drupalGet('/node/add/article');
+
+    $this->getSession()->switchToIFrame('entity_browser_iframe_' . $entity_browser_id);
+
+    $this->assertSession()->pageTextContains("There is a mismatch between the field target bundles and the target bundles used by the Entity form widget in the entity browser Article Entity Form.");
+  }
+
+}
diff --git a/tests/src/Kernel/Extension/EntityBrowserTest.php b/tests/src/Kernel/Extension/EntityBrowserTest.php
index 3a63410..9d0150f 100644
--- a/tests/src/Kernel/Extension/EntityBrowserTest.php
+++ b/tests/src/Kernel/Extension/EntityBrowserTest.php
@@ -33,6 +33,8 @@ class EntityBrowserTest extends KernelTestBase {
     'views',
     'file',
     'node',
+    'media',
+    'image',
     'entity_browser',
     'entity_browser_test',
   ];
