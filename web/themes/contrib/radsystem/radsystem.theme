<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_theme_registry_alter().
 */
function radsystem_theme_registry_alter(&$theme_registry) {
  // radsystem path.
  $radsystem_path = Drupal::service('theme_handler')->getTheme('radsystem')->getPath();
  $theme_registry['entity_embed_container']['path'] = $radsystem_path . '/templates/entity-embed';

  $pages = [
    'page__user__login' => 'page--user--login',
    'page__user__register' => 'page--user--register',
    'page__user__password' => 'page--user--password',
    'page__user__reset' => 'page--user--reset',
  ];

  foreach ($pages as $key => $template) {
    $theme_registry[$key]['path'] = $radsystem_path . '/templates/betterlogin';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function radsystem_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }
    if ($node instanceof NodeInterface) {
      array_splice($suggestions, 1, 0, 'page__' . $node->bundle());
    }
  }
}

/**
 *
 */
function radsystem_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (theme_get_setting('bootstrap_barrio_navbar_position')) {
    $variables['navbar_position'] = theme_get_setting('bootstrap_barrio_navbar_position');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function radsystem_preprocess_page(&$variables) {
  $variables['logo_print'] = \Drupal::request()->getBaseUrl() . '/' . drupal_get_path('theme', 'radsystem') . '/logo-print.png';
}

/**
 * Implements hook_preprocess_paragraph().
 */
function radsystem_preprocess_paragraph(&$variables) {
  $file_path = NULL;
  if (isset($variables['paragraph']->bp_image_field)
    && isset($variables['paragraph']->bp_image_field->target_id)) {

    // Get the target id and build the url.
    $paragraph = &$variables['paragraph'];
    if (isset($paragraph->get('bp_image_field')->entity)
      && isset($paragraph->get('bp_image_field')->entity->field_media_image)
      && isset($paragraph->get('bp_image_field')->entity->field_media_image->target_id)) {

      $target_id = $paragraph->get('bp_image_field')->entity->field_media_image->target_id;
      $file = File::load($target_id);
      if (isset($file)) {
        $file_uri = $file->getFileUri();
        $style = ImageStyle::load('de2e');
        $file_path = $style->buildUrl($file_uri);
      }
    }
  }

  $width_value = NULL;
  if (isset($variables['paragraph']->bp_width)
    && isset($variables['paragraph']->bp_width->value)) {

    $width_value = $variables['paragraph']->bp_width->value;
  }

  $width_map = [
    'paragraph--width--tiny' => 'col-md-4 offset-md-4 col-sm-8 offset-sm-2',
    'paragraph--width--narrow' => 'col-md-6 offset-md-3 col-sm-10 offset-sm-1',
    'paragraph--width--medium' => 'col-md-8 offset-md-2',
    'paragraph--width--wide' => 'col-md-10 offset-md-1',
    'paragraph--width--full' => 'col-12',
    'bg-edge2edge' => 'bg-edge2edge col-12',
  ];

  $width = 'col-12';
  if (isset($width_map[$width_value])) {
    $width = $width_map[$width_value];
  }

  $custom_paragraph_classes_value = NULL;
  if (isset($variables['paragraph']->bp_classes)
      && isset($variables['paragraph']->bp_classes->value)) {
    $custom_paragraph_classes_value = $variables['paragraph']->bp_classes->value;
  }

  $gutter_value = FALSE;
  if (isset($variables['paragraph']->bp_gutter)
      && isset($variables['paragraph']->bp_gutter->value)) {
    $gutter_value = $variables['paragraph']->bp_gutter->value;
  }

  $title_status = FALSE;
  if (isset($variables['paragraph']->bp_title_status)
      && isset($variables['paragraph']->bp_title_status->value)) {
    $title_status = $variables['paragraph']->bp_title_status->value;
  }

  // Add variables to template.
  $variables["VBP"] = [
    'background_image' => [
      'type' => 'image',
      'url' => $file_path,
    ],
    'bp_width' => [
      'type' => 'string',
      'value' => $width,
    ],
    'bp_classes' => [
      'type' => 'string',
      'value' => $custom_paragraph_classes_value,
    ],
    'bp_gutter' => [
      'type' => 'bool',
      'value' => $gutter_value,
    ],
    'bp_title_status' => [
      'type' => 'bool',
      'value' => $title_status,
    ],
  ];
}

/**
 * Prepares variables for views grid templates.
 *
 * Default template: views-bootstrap-grid.html.twig.
 *
 * @param array $vars
 *   An associative array containing:
 *   - view: A ViewExecutable object.
 *   - rows: The raw row data.
 */
function radsystem_preprocess_views_bootstrap_grid(array &$vars) {

  if (isset($vars['options']) && isset($vars['options']["col_xs"])) {
    $vars['options']["col_xs"] = str_replace("xs-", "", $vars['options']["col_xs"]);
  }

}


/**
 * Implements hook_preprocess(&$variables, $hook).
 */
function radsystem_preprocess(&$variables, $hook) {
  // Commerce Product.
  if (isset($variables['elements']['#entity_type']) && $hook == 'commerce_product') {
    if (isset($variables['elements']['#commerce_product'])) {
      // Set base path variable.
      $variables['base_path'] = base_path();

      // Get view mode & assign variable.
      $view_mode = $variables['elements']['#view_mode'];
      $variables['view_mode'] = $view_mode;

      // Get product and variations.
      $product = $variables['elements']['#commerce_product'];
      $product_variations = $product->getVariations();



      // Product Variation Images.
      if (!empty($product_variations)) {
        // Loop through variations and create array to feed images
        // if the variation is active and contains an image.
        foreach ($product_variations as $variation) {
          if ($variation->status->value == '1') {
            if (isset($variation->field_product_images->entity)) {
              // Create array to feed images into.
              $product_variation_images = [];
              break;
            }
          }
        }
        foreach ($product_variations as $key => $variation) {
                  // If variation is active.
          if ($variation->status->value == '1') {
                              // If variation has an image.
                if (isset($variation->field_product_images->entity)) {
                     $variation_id = $variation->variation_id->value;
                     $product_variation_images[$key]['variation_id'] = $variation_id;
                     foreach ($variation->field_product_images as $image_key => &$variation_image) {
                         $product_variation_images[$key]['images'][$image_key] = $variation_image;
                     }
                }
           }
        }
      }
    }
  }
}


/**
 * Implements hook_preprocess_commerce_product_variation(&$variables).
 */
function radsystem_preprocess_commerce_product_variation(&$variables) {
  // Commerce Product Variation.
  if (isset($variables['elements']['#commerce_product_variation'])) {
    // Get view mode & assign variable.
    $view_mode = $variables['elements']['#view_mode'];
   $variables['view_mode'] = $view_mode;
   }
 }


function radsystem_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}


function radsystem_preprocess_page_title(&$variables) {
  $variables['url'] = $_SERVER['REQUEST_URI'];
  $variables['#cache']['contexts'][] = 'url.path';
}




